const si = require('systeminformation');

module.exports.config = {
    name: "system",
    version: "1.0.0",
    hasPermssion: 2,
    credits: "QuocDuy",
    description: "Xem th√¥ng tin h·ªá th·ªëng",
    commandCategory: "system",
    usages: "[cpu/ram/disk/os/all]",
    cooldowns: 5
};

module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID } = event;
    const type = args[0]?.toLowerCase();

    try {
        switch (type) {
            case "cpu": {
                const cpu = await si.cpu();
                const cpuTemp = await si.cpuTemperature();
                return api.sendMessage(
                    `üñ• Th√¥ng tin CPU:\n` +
                    `- Nh√† s·∫£n xu·∫•t: ${cpu.manufacturer}\n` +
                    `- Th∆∞∆°ng hi·ªáu: ${cpu.brand}\n` +
                    `- T·ªëc ƒë·ªô: ${cpu.speed}GHz\n` +
                    `- S·ªë l√µi: ${cpu.cores}\n` +
                    `- S·ªë l√µi v·∫≠t l√Ω: ${cpu.physicalCores}\n` +
                    `- Nhi·ªát ƒë·ªô: ${cpuTemp.main}¬∞C`,
                    threadID, messageID
                );
            }
            
            case "ram": {
                const mem = await si.mem();
                return api.sendMessage(
                    `üíæ Th√¥ng tin RAM:\n` +
                    `- T·ªïng dung l∆∞·ª£ng: ${(mem.total / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- ƒê√£ s·ª≠ d·ª•ng: ${(mem.used / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- C√≤n tr·ªëng: ${(mem.available / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- T·ª∑ l·ªá s·ª≠ d·ª•ng: ${((mem.used / mem.total) * 100).toFixed(2)}%`,
                    threadID, messageID
                );
            }
            
            case "disk": {
                const disk = await si.fsSize();
                let diskInfo = "üíø Th√¥ng tin ·ªï ƒëƒ©a:\n";
                
                for (const drive of disk) {
                    diskInfo += `\n${drive.mount}:\n` +
                        `- Dung l∆∞·ª£ng: ${(drive.size / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                        `- ƒê√£ d√πng: ${(drive.used / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                        `- C√≤n tr·ªëng: ${(drive.available / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                        `- T·ª∑ l·ªá s·ª≠ d·ª•ng: ${((drive.used / drive.size) * 100).toFixed(2)}%\n`;
                }
                
                return api.sendMessage(diskInfo, threadID, messageID);
            }
            
            case "os": {
                const os = await si.osInfo();
                return api.sendMessage(
                    `üñ• Th√¥ng tin h·ªá ƒëi·ªÅu h√†nh:\n` +
                    `- N·ªÅn t·∫£ng: ${os.platform}\n` +
                    `- Phi√™n b·∫£n: ${os.distro}\n` +
                    `- Phi√™n b·∫£n ph√°t h√†nh: ${os.release}\n` +
                    `- Kernel: ${os.kernel}\n` +
                    `- Ki·∫øn tr√∫c: ${os.arch}\n` +
                    `- T√™n m√°y ch·ªß: ${os.hostname}`,
                    threadID, messageID
                );
            }
            
            case "all": {
                const cpu = await si.cpu();
                const mem = await si.mem();
                const os = await si.osInfo();
                const disk = await si.fsSize();
                
                let systemInfo = "üìä Th√¥ng tin h·ªá th·ªëng:\n\n";
                
                // CPU
                systemInfo += `üñ• CPU:\n` +
                    `- Th∆∞∆°ng hi·ªáu: ${cpu.brand}\n` +
                    `- S·ªë l√µi: ${cpu.cores}\n` +
                    `- T·ªëc ƒë·ªô: ${cpu.speed}GHz\n\n`;
                
                // RAM
                systemInfo += `üíæ RAM:\n` +
                    `- T·ªïng dung l∆∞·ª£ng: ${(mem.total / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- ƒê√£ s·ª≠ d·ª•ng: ${(mem.used / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- T·ª∑ l·ªá s·ª≠ d·ª•ng: ${((mem.used / mem.total) * 100).toFixed(2)}%\n\n`;
                
                // OS
                systemInfo += `üíª H·ªá ƒëi·ªÅu h√†nh:\n` +
                    `- N·ªÅn t·∫£ng: ${os.platform}\n` +
                    `- Phi√™n b·∫£n: ${os.distro}\n` +
                    `- Phi√™n b·∫£n ph√°t h√†nh: ${os.release}\n\n`;
                
                // Disk
                systemInfo += `üíø ·ªî ƒëƒ©a ch√≠nh:\n` +
                    `- Dung l∆∞·ª£ng: ${(disk[0].size / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- ƒê√£ s·ª≠ d·ª•ng: ${(disk[0].used / (1024 * 1024 * 1024)).toFixed(2)}GB\n` +
                    `- T·ª∑ l·ªá s·ª≠ d·ª•ng: ${((disk[0].used / disk[0].size) * 100).toFixed(2)}%`;
                
                return api.sendMessage(systemInfo, threadID, messageID);
            }
            
            default: {
                return api.sendMessage(
                    `S·ª≠ d·ª•ng: system [cpu/ram/disk/os/all]\n` +
                    `- cpu: Xem th√¥ng tin CPU\n` +
                    `- ram: Xem th√¥ng tin RAM\n` +
                    `- disk: Xem th√¥ng tin ·ªï ƒëƒ©a\n` +
                    `- os: Xem th√¥ng tin h·ªá ƒëi·ªÅu h√†nh\n` +
                    `- all: Xem t·∫•t c·∫£ th√¥ng tin`,
                    threadID, messageID
                );
            }
        }
    } catch (error) {
        console.error(error);
        return api.sendMessage(
            "ƒê√£ c√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin h·ªá th·ªëng!",
            threadID, messageID
        );
    }
};
