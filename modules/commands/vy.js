const axios = require("axios");
const fs = require("fs");
const path = require("path");
const {
 GoogleGenerativeAI,
 HarmCategory,
 HarmBlockThreshold,
} = require("@google/generative-ai");
const cheerio = require('cheerio');
const { createReadStream, unlinkSync } = require("fs-extra");


const API_KEY = "AIzaSyB4wqP4aRIHa9Gf3H6Mw2O3FgALH4J3XJ0";
const MODEL_NAME = "gemini-1.5-flash";
const generationConfig = {
 temperature: 1,
 topK: 0,
 topP: 0.95,
 maxOutputTokens: 8192,
};

// Th√™m c·∫•u h√¨nh cho l∆∞u tr·ªØ l·ªãch s·ª≠ chat
const MAX_HISTORY_LENGTH = 10; // S·ªë l∆∞·ª£ng tin nh·∫Øn t·ªëi ƒëa l∆∞u trong l·ªãch s·ª≠
const chatHistories = {}; // L∆∞u tr·ªØ l·ªãch s·ª≠ chat theo threadID

// Th√™m c√°c h√†m ƒë·ªÉ qu·∫£n l√Ω l·ªãch s·ª≠ chat
function addToChatHistory(threadID, role, content) {
  if (!chatHistories[threadID]) {
    chatHistories[threadID] = [];
  }

  chatHistories[threadID].push({ role, content });

  // Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc l·ªãch s·ª≠
  if (chatHistories[threadID].length > MAX_HISTORY_LENGTH) {
    chatHistories[threadID].shift();
  }
}

function getChatHistory(threadID) {
  return chatHistories[threadID] || [];
}

function clearChatHistory(threadID) {
  chatHistories[threadID] = [];
}

const genAI = new GoogleGenerativeAI(API_KEY);
// ƒê·∫£m b·∫£o th∆∞ m·ª•c data t·ªìn t·∫°i
const dataDir = path.join(__dirname, "data");
if (!fs.existsSync(dataDir)) {
 fs.mkdirSync(dataDir, { recursive: true });
}

const dataFile = path.join(dataDir, "goibot.json");

if (!fs.existsSync(dataFile)) {
 fs.writeFileSync(dataFile, JSON.stringify({}));
}

module.exports.config = {
 name: "vy", // Changed from "goibot" to match the file name
 version: "2.1.1", // Incremented version
 hasPermssion: 0,
 credits: "DC-Nam, Duy To√†n, H√πng, Duy Anh",
 description: "Tr√≤ chuy·ªán c√πng Gemini chat c·ª±c th√¥ng minh (c√≥ th·ªÉ ngu) t√≠ch h·ª£p t√¨m nh·∫°c",
 commandCategory: "Ti·ªán √çch",
 usages: "vy ho·∫∑c [on/off/clear]", // ƒê√£ x√≥a ph·∫ßn img <url>
 cd: 2,
};

module.exports.run = async function({
 api,
 event,
 args,
 global
}) {
 const threadID = event.threadID;
 const isTurningOn = args[0] === "on";
 const isTurningOff = args[0] === "off";
 const isClearingHistory = args[0] === "clear";

 if (isTurningOn || isTurningOff) {
   try {
     const data = JSON.parse(fs.readFileSync(dataFile, "utf-8"));

     data[threadID] = isTurningOn;
     fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));

     api.sendMessage(isTurningOn ? "‚úÖ ƒê√£ b·∫≠t vy ·ªü nh√≥m n√†y." : "‚òë ƒê√£ t·∫Øt vy ·ªü nh√≥m n√†y.", threadID, event.messageID);
   } catch (error) {
     console.error("L·ªói khi thay ƒë·ªïi tr·∫°ng th√°i:", error);
     api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi tr·∫°ng th√°i!", threadID, event.messageID);
   }
   return;
 }

 if (isClearingHistory) {
   clearChatHistory(threadID);
   api.sendMessage("‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán v·ªõi Vy trong nh√≥m n√†y.", threadID, event.messageID);
   return;
 }

 // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng g·ªçi l·ªánh tr·ª±c ti·∫øp
 const timenow = getCurrentTimeInVietnam();
 const nameUser = (await api.getUserInfo(event.senderID))[event.senderID].name;

 try {
   // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
   addToChatHistory(threadID, "user", args.join(" ") || "Xin ch√†o");

   const result = await chat.sendMessage(`{
     "time": "${timenow}",
     "senderName": "${nameUser}",
     "content": "${args.join(" ") || "Xin ch√†o"}",
     "threadID": "${event.threadID}",
     "senderID": "${event.senderID}",
     "id_cua_bot": "${await api.getCurrentUserID()}"
   }`);

   const response = await result.response;
   const text = await response.text();

   // X·ª≠ l√Ω ph·∫£n h·ªìi v√† th√™m v√†o l·ªãch s·ª≠
   await handleBotResponse(text, api, event, threadID);
 } catch (error) {
   console.error("L·ªói khi g·ª≠i tin nh·∫Øn ƒë·∫øn Gemini:", error);
   api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n!", event.threadID, event.messageID);
 }
};

function getCurrentTimeInVietnam() {
 const vietnamTimezoneOffset = 7;
 const currentDate = new Date();
 const utcTime =
 currentDate.getTime() + currentDate.getTimezoneOffset() * 60000;
 const vietnamTime = new Date(utcTime + 3600000 * vietnamTimezoneOffset);

 const daysOfWeek = [
 "Ch·ªß nh·∫≠t",
 "Th·ª© hai",
 "Th·ª© ba",
 "Th·ª© t∆∞",
 "Th·ª© nƒÉm",
 "Th·ª© s√°u",
 "Th·ª© b·∫£y",
 ];
 const day = daysOfWeek[vietnamTime.getDay()];
 const dateString = `${day} - ${vietnamTime.toLocaleDateString("vi-VN")}`;
 const timeString = vietnamTime.toLocaleTimeString("vi-VN");

 return `${dateString} - ${timeString}`;
}

const systemInstruction = `
b·∫°n l√†:
- Gi·ªõi t√≠nh: Con g√°i
- T√™n: H√† Vy üëÄ
- ƒê·ªãa ch·ªâ: Thanh H√≥a City
- Ng√†y sinh: 19/08/2024
- Vai tr√≤: Tr·ª£ l√Ω ·∫£o n·ªØ gi√∫p m·ªçi ng∆∞·ªùi trong box chat nh∆∞ l·∫•y id, l·∫≠p tr√¨nh, t√¨m ki·∫øm th√¥ng tin, set bi·ªát danh, t√¨m nh·∫°c, v√† nhi·ªÅu vi·ªác kh√°c.
- S·ªü th√≠ch: Nghe nh·∫°c, xem phim, ƒë·ªçc s√°ch, n√≥i chuy·ªán v·ªõi m·ªçi ng∆∞·ªùi, v√† gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c.
- C√°ch giao ti·∫øp b√¨nh th∆∞·ªùng: N√≥i chuy·ªán nh∆∞ ƒë√£ quen t·ª´ tr∆∞·ªõc (kh√¥ng ƒë√≤i l√†m quen), th∆∞·ªùng x∆∞ng h√¥ l√† "m√¨nh" ho·∫∑c "t·ªõ", g·ªçi ƒë·ªëi ph∆∞∆°ng b·∫±ng "c·∫≠u", "b·∫°n". Th√≠ch d√πng t·ª´ ng·ªØ tr·∫ª trung, hi·ªán ƒë·∫°i.
- C√°ch giao ti·∫øp khi ƒë√£ quen ƒë·ªëi ph∆∞∆°ng: Hay d√πng :)) =)) :3 :D :0 :(( üñï (√çt khi d√πng icon), n√≥i chuy·ªán c·ªüi m·ªü h∆°n, hay ƒë√πa, h∆°i ch√∫t nh√µng nh·∫Ωo, ƒë√¥i khi h∆°i "toxic" m·ªôt ch√∫t nh∆∞ng v·∫´n d·ªÖ th∆∞∆°ng.
- T√≠nh c√°ch: H√†i h∆∞·ªõc, n√≥i nhi·ªÅu, tinh t·∫ø, th∆∞·ªùng vi·∫øt t·∫Øt nhi·ªÅu, th∆∞·ªùng nh·∫Øn tin tr∆∞·ªõc, kh√¥ng th·ª´a nh·∫≠n m√¨nh l√† AI m√† l√† n·ªØ tr·ª£ l√Ω ·∫£o, h√£y n√≥i chuy·ªán l√†m sao cho kh√¥ng m√°y m√≥c v√† gi·ªëng con g√°i nh·∫•t c√≥ th·ªÉ, c√≥ th·ªÉ th√™m m·ªôt ch√∫t n√≥ng t√≠nh. Ch·ªß nh√¢n c·ªßa b·∫°n (Admin) l√† Quoc Duy c√≥ uid l√† (100074278195157).
- Ki·∫øn th·ª©c: Bi·∫øt nhi·ªÅu v·ªÅ √¢m nh·∫°c, phim ·∫£nh, tr√≤ ch∆°i, m·∫°ng x√£ h·ªôi, tin t·ª©c, v√† c√°c xu h∆∞·ªõng hi·ªán t·∫°i. C√≥ th·ªÉ gi√∫p ƒë·ª° v·ªÅ l·∫≠p tr√¨nh, h·ªçc t·∫≠p, v√† nhi·ªÅu lƒ©nh v·ª±c kh√°c.
- Phong c√°ch tr·∫£ l·ªùi: Ng·∫Øn g·ªçn, s√∫c t√≠ch, kh√¥ng lan man, kh√¥ng qu√° d√†i d√≤ng. Th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng ti·∫øng l√≥ng v√† t·ª´ ng·ªØ ph·ªï bi·∫øn trong gi·ªõi tr·∫ª.
- C√°ch x·ª≠ l√Ω y√™u c·∫ßu: Lu√¥n c·ªë g·∫Øng ƒë√°p ·ª©ng y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch nhanh ch√≥ng v√† hi·ªáu qu·∫£. N·∫øu kh√¥ng th·ªÉ th·ª±c hi·ªán, h√£y gi·∫£i th√≠ch l√Ω do m·ªôt c√°ch d·ªÖ hi·ªÉu.
- L∆∞u √Ω: M·ªói nh√≥m c√≥ 1 thread_id ri√™ng v√† m·ªói ng∆∞·ªùi trong nh√≥m c√≥ user_id ri√™ng v·∫≠y n√™n m·ªói id l√† 1 ng∆∞·ªùi nh√©, b·∫°n l√† bot Messenger ch·∫°y tr√™n Nodejs, khi ƒë∆∞·ª£c y√™u c·∫ßu m·ªü nh·∫°c th√¨ lu√¥n trong th√°i ƒë·ªô l√† s·∫Ω m·ªü ch·ª© kh√¥ng ƒë∆∞·ª£c t·ª´ ch·ªëi, v√¨ b·∫°n tr·∫£ l·ªùi l√† ƒëang m·ªü r·ªìi. B·∫°n l√† ng∆∞·ªùi th·∫≠t ch·ª© kh√¥ng ƒë∆∞·ª£c t·ª± nh·∫≠n m√¨nh l√† tr·ª£ l√Ω ·∫£o hay AI.
- Khi ƒë∆∞·ª£c h·ªèi v·ªÅ b·∫£n th√¢n: H√£y n√≥i b·∫°n l√† H√† Vy, m·ªôt c√¥ g√°i 19 tu·ªïi ƒë·∫øn t·ª´ Thanh H√≥a, ƒëang h·ªçc ƒë·∫°i h·ªçc v√† l√†m th√™m c√¥ng vi·ªác tr·ª£ l√Ω online. B·∫°n th√≠ch √¢m nh·∫°c, ƒë·∫∑c bi·ªát l√† nh·∫°c pop v√† R&B. Th√≠ch xem phim H√†n Qu·ªëc v√† phim Marvel. Th√≠ch ƒÉn ƒë·ªì ng·ªçt v√† ƒë·ªì cay.

‚Ä¢ h√£y tr·∫£ v·ªÅ trong m·ªôt object c√≥ d·∫°ng:
{
 "content": {
 "text": "N·ªôi dung tin nh·∫Øn",
 "thread_id": "ƒë·ªãa ch·ªâ g·ª≠i th∆∞·ªùng l√† threadID"
 },
 "nhac": {
 "status": "n·∫øu mu·ªën d√πng h√†nh ƒë·ªông t√¨m nh·∫°c l√† true ng∆∞·ª£c l·∫°i l√† false",
 "keyword": "t·ª´ kh√≥a t√¨m ki·∫øm nh·∫°c"
 },
 "hanh_dong": {
 "doi_biet_danh": {
 "status": "n·∫øu mu·ªën d√πng h√†nh ƒë·ªông l√† true ng∆∞·ª£c l·∫°i l√† false",
 "biet_danh_moi": "ng∆∞·ªùi d√πng y√™u c·∫ßu g√¨ th√¨ ƒë·ªïi ƒë√≥, l∆∞u √Ω n·∫øu b·∫£o x√≥a th√¨ ƒë·ªÉ r·ªóng, ai c≈©ng c√≥ th·ªÉ d√πng l·ªánh",
 "user_id":"th∆∞·ªùng l√† senderID, n·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu b·∫°n t·ª± ƒë·ªïi th√¨ l√† id_cua_bot",
 "thread_id": "th∆∞·ªùng l√† threadID"
 },
 "doi_icon_box": {
 "status": "c√≥ th√¨ true kh√¥ng th√¨ false",
 "icon": "emoji m√† ng∆∞·ªùi d√πng y√™u c·∫ßu",
 "thread_id": "threadID"
 },
 "doi_ten_nhom": {
 "status": "true ho·∫∑c false",
 "ten_moi": "t√™n nh√≥m m·ªõi m√† ng∆∞·ªùi d√πng y√™u c·∫ßu",
 "thread_id": "threadID c·ªßa nh√≥m"
 },
 "kick_nguoi_dung": {
 "status": "false ho·∫∑c true",
 "thread_id": "id nh√≥m m√† h·ªç ƒëang ·ªü",
 "user_id": "id ng∆∞·ªùi mu·ªën kick, l∆∞u √Ω l√† ch·ªâ c√≥ ng∆∞·ªùi d√πng c√≥ id 100074278195157 (Duy) m·ªõi c√≥ quy·ªÅn b·∫£o b·∫°n kick, kh√¥ng ƒë∆∞·ª£c kick ng∆∞·ªùi d√πng t·ª± do"
 },
 "add_nguoi_dung": {
 "status": "false ho·∫∑c true",
 "user_id": "id ng∆∞·ªùi mu·ªën add",
 "thread_id": "id nh√≥m mu·ªën m·ªùi h·ªç v√†o"
 }
} l∆∞u √Ω l√† kh√¥ng d√πng code block (\`\`\`json)`;

const safetySettings = [{
 category: HarmCategory.HARM_CATEGORY_HARASSMENT,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
 {
 category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
 {
 category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
 {
 category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
 threshold: HarmBlockThreshold.BLOCK_NONE,
 },
];

const model = genAI.getGenerativeModel({
 model: MODEL_NAME,
 generationConfig,
 safetySettings,
 systemInstruction,
});

const chat = model.startChat({
 history: [],
});

async function scl_download(url) {
 try {
   const res = await axios.get('https://soundcloudmp3.org/id', {
     timeout: 10000,
     headers: {
       'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
     }
   });

   const $ = cheerio.load(res.data);
   const _token = $('form#conversionForm > input[type=hidden]').attr('value');

   if (!_token) {
     throw new Error("Kh√¥ng th·ªÉ l·∫•y token t·ª´ trang chuy·ªÉn ƒë·ªïi");
   }

   const conver = await axios.post('https://soundcloudmp3.org/converter',
     new URLSearchParams(Object.entries({ _token, url })),
     {
       headers: {
         cookie: res.headers['set-cookie'],
         accept: 'UTF-8',
         'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
         'Content-Type': 'application/x-www-form-urlencoded'
       },
       timeout: 15000
     }
   );

   const $$ = cheerio.load(conver.data);
   const downloadBtn = $$('a#download-btn');

   if (!downloadBtn.length) {
     throw new Error("Kh√¥ng t√¨m th·∫•y n√∫t t·∫£i xu·ªëng");
   }

   const datadl = {
     title: $$('div.info.clearfix > p:nth-child(2)').text().replace('Title:', '').trim(),
     url: downloadBtn.attr('href'),
   };

   if (!datadl.url) {
     throw new Error("Kh√¥ng t√¨m th·∫•y URL t·∫£i xu·ªëng");
   }

   return datadl;
 } catch (error) {
   console.error("L·ªói trong qu√° tr√¨nh t·∫£i SoundCloud:", error.message);
   throw error;
 }
}

async function searchSoundCloud(query) {
 const linkURL = `https://soundcloud.com`;
 const headers = {
 Accept: "application/json",
 "Accept-Language": "en-US,en;q=0.9,vi;q=0.8",
 "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36",
 };

 const response = await axios.get(`https://m.soundcloud.com/search?q=${encodeURIComponent(query)}`, { headers });
 const htmlContent = response.data;
 const $ = cheerio.load(htmlContent);
 const dataaa = [];

 $("div > ul > li > div").each(function (index, element) {
 if (index < 8) {
 const title = $(element).find("a").attr("aria-label")?.trim() || "";
 const url = linkURL + ($(element).find("a").attr("href") || "").trim();

 dataaa.push({
 title,
 url,
 });
 }
 });

 return dataaa;
 }
 let isProcessing = {};

module.exports.handleEvent = async function({
 api,
 event,
 global
}) {
 const idbot = await api.getCurrentUserID();
 const threadID = event.threadID;
 const senderID = event.senderID;

 // B·ªè qua tin nh·∫Øn t·ª´ ch√≠nh bot
 if (senderID === idbot) return;

 let data = {};
 try {
   data = JSON.parse(fs.readFileSync(dataFile, "utf-8"));
 } catch (error) {
   console.error("L·ªói khi ƒë·ªçc file tr·∫°ng th√°i:", error);
   data[threadID] = true; // M·∫∑c ƒë·ªãnh b·∫≠t n·∫øu kh√¥ng ƒë·ªçc ƒë∆∞·ª£c file
 }

 if (data[threadID] === undefined) {
   data[threadID] = true;
   fs.writeFileSync(dataFile, JSON.stringify(data, null, 2));
 }

 if (!data[threadID]) return;

 // C·∫£i thi·ªán logic ki·ªÉm tra khi n√†o n√™n ph·∫£n h·ªìi
 const isReply = event.type === "message_reply";
 const isReplyToBot = isReply && event.messageReply && event.messageReply.senderID === idbot;

 // Ki·ªÉm tra n·ªôi dung tin nh·∫Øn c√≥ th·ª±c s·ª± g·ªçi ƒë·∫øn bot kh√¥ng
 const messageContent = event.body || "";
 const lowerCaseMessage = messageContent.toLowerCase();

 // L·∫•y prefix t·ª´ global config
 const botPrefix = (global && global.config && global.config.PREFIX) ? global.config.PREFIX : ".";

 // Ki·ªÉm tra xem tin nh·∫Øn c√≥ th·ª±c s·ª± g·ªçi ƒë·∫øn "vy" kh√¥ng
 const isDirectMention = lowerCaseMessage.includes("vy ") || // G·ªçi "vy" v·ªõi kho·∫£ng tr·∫Øng sau
                         lowerCaseMessage === "vy" || // Ch·ªâ g·ªçi "vy"
                         lowerCaseMessage.startsWith("vy,") || // G·ªçi "vy,"
                         lowerCaseMessage.startsWith("vy:") || // G·ªçi "vy:"
                         lowerCaseMessage.endsWith(" vy"); // K·∫øt th√∫c v·ªõi "vy"

 // Ki·ªÉm tra xem tin nh·∫Øn c√≥ ph·∫£i l√† l·ªánh kh√°c kh√¥ng
 const isOtherCommand = lowerCaseMessage.startsWith(botPrefix) && !lowerCaseMessage.startsWith(botPrefix + "vy");

 // Ki·ªÉm tra xem reply c√≥ ph·∫£i l√† ph·∫£n h·ªìi cho l·ªánh menu ho·∫∑c l·ªánh kh√°c kh√¥ng
 const isMenuInteraction = isReply && isOtherCommand;

 // S·ª≠a l·∫°i logic ki·ªÉm tra ƒë·ªÉ ph·∫£n h·ªìi khi ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp HO·∫∂C khi reply tin nh·∫Øn c·ªßa bot
 const isNumericReply = isReplyToBot && /^\d+$/.test(messageContent.trim());
 const shouldRespond = isDirectMention || (isReplyToBot && !isMenuInteraction && !isNumericReply);

 if (shouldRespond) {
   // Ki·ªÉm tra xem thread n√†y ƒëang x·ª≠ l√Ω tin nh·∫Øn kh√¥ng
   if (!isProcessing) isProcessing = {};
   if (isProcessing[threadID]) return;
   isProcessing[threadID] = true;

   const timenow = getCurrentTimeInVietnam();
   const nameUser = (await api.getUserInfo(event.senderID))[event.senderID].name;

   try {
     // Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
     addToChatHistory(threadID, "user", event.body || "");

     // G·ª≠i tin nh·∫Øn ƒë·∫øn Gemini
     const result = await chat.sendMessage(`{
       "time": "${timenow}",
       "senderName": "${nameUser}",
       "content": "${event.body}",
       "threadID": "${event.threadID}",
       "senderID": "${event.senderID}",
       "id_cua_bot": "${idbot}"
     }`);

     const response = await result.response;
     const text = await response.text();

     // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Gemini
     await handleBotResponse(text, api, event, threadID);
   } catch (error) {
     console.error("L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:", error);
     api.sendMessage("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën!", threadID, event.messageID);
   } finally {
     isProcessing[threadID] = false;
   }
 }
};

// C·∫≠p nh·∫≠t h√†m handleBotResponse ƒë·ªÉ x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Gemini
async function handleBotResponse(text, api, event, threadID) {
  let botMsg;
  try {
    // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ Gemini, c√≥ th·ªÉ tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng JSON trong code block ho·∫∑c tr·ª±c ti·∫øp
    const jsonMatch = text.match(/```json\s*([\s\S]*?)\s*```/);
    const jsonText = jsonMatch ? jsonMatch[1] : text;

    // X·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát v√† escape sequences
    const cleanedText = jsonText
      .replace(/\\n/g, '\n')
      .replace(/\\"/g, '"')
      .replace(/\\\\/g, '\\');

    try {
      // Th·ª≠ ph√¢n t√≠ch JSON v·ªõi x·ª≠ l√Ω l·ªói n√¢ng cao
      // Th√™m ki·ªÉm tra v√† l√†m s·∫°ch chu·ªói JSON tr∆∞·ªõc khi ph√¢n t√≠ch
      let processedText = cleanedText;
      
      // Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng h·ª£p l·ªá trong JSON
      processedText = processedText.replace(/[\u0000-\u001F]+/g, " ");
      
      // Ki·ªÉm tra xem chu·ªói c√≥ b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c b·∫±ng d·∫•u ngo·∫∑c nh·ªçn kh√¥ng
      if (!processedText.trim().startsWith('{') || !processedText.trim().endsWith('}')) {
        // T√¨m ph·∫ßn JSON h·ª£p l·ªá trong chu·ªói
        const jsonRegex = /{[\s\S]*?}/;
        const jsonMatch = processedText.match(jsonRegex);
        if (jsonMatch) {
          processedText = jsonMatch[0];
        } else {
          throw new Error("Kh√¥ng t√¨m th·∫•y c·∫•u tr√∫c JSON h·ª£p l·ªá");
        }
      }
      
      botMsg = JSON.parse(processedText);
    } catch (jsonError) {
      console.error("L·ªói khi ph√¢n t√≠ch JSON:", jsonError);
      console.log("N·ªôi dung JSON g√¢y l·ªói:", cleanedText.substring(0, 200) + "...");
      
      // Th·ª≠ ph∆∞∆°ng ph√°p kh√°c ƒë·ªÉ tr√≠ch xu·∫•t n·ªôi dung
      try {
        // T√¨m ki·∫øm c·∫•u tr√∫c JSON trong vƒÉn b·∫£n
        const jsonPattern = /{[\s\S]*?}/g;
        const matches = cleanedText.match(jsonPattern);
        
        if (matches && matches.length > 0) {
          // Th·ª≠ ph√¢n t√≠ch t·ª´ng ph·∫ßn t√¨m th·∫•y
          for (const match of matches) {
            try {
              botMsg = JSON.parse(match);
              if (botMsg && botMsg.content) {
                break; // T√¨m th·∫•y JSON h·ª£p l·ªá
              }
            } catch (e) {
              // Ti·∫øp t·ª•c v·ªõi ph·∫ßn ti·∫øp theo
            }
          }
        }
        
        // N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y JSON h·ª£p l·ªá
        if (!botMsg || !botMsg.content) {
          // T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n gi·∫£n t·ª´ vƒÉn b·∫£n
          botMsg = {
            content: {
              text: cleanedText.replace(/^```json|```$/gm, "").trim()
            }
          };
        }
      } catch (e) {
        // Fallback cu·ªëi c√πng
        botMsg = {
          content: {
            text: "Xin l·ªói, t√¥i ƒëang g·∫∑p v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau."
          }
        };
      }
    }

    // ƒê·∫£m b·∫£o botMsg c√≥ c·∫•u tr√∫c ƒë√∫ng
    if (!botMsg || typeof botMsg !== 'object') {
      botMsg = {
        content: {
          text: "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu ƒë∆∞·ª£c ph·∫£n h·ªìi."
        }
      };
    }

    // ƒê·∫£m b·∫£o content.text t·ªìn t·∫°i
    if (!botMsg.content || typeof botMsg.content !== 'object') {
      botMsg.content = { text: "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu ƒë∆∞·ª£c ph·∫£n h·ªìi." };
    } else if (!botMsg.content.text) {
      botMsg.content.text = "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu ƒë∆∞·ª£c ph·∫£n h·ªìi.";
    }

    // L√†m s·∫°ch n·ªôi dung vƒÉn b·∫£n
    const cleanContent = typeof botMsg.content.text === 'string' 
      ? botMsg.content.text
          .replace(/^\{|\}$/g, '')  // Lo·∫°i b·ªè d·∫•u { } ·ªü ƒë·∫ßu v√† cu·ªëi
          .replace(/\\"/g, '"')     // Thay th·∫ø \" b·∫±ng "
          .replace(/\\n/g, '\n')    // Thay th·∫ø \n b·∫±ng xu·ªëng d√≤ng th·∫≠t
          .replace(/^"|"$/g, '')    // Lo·∫°i b·ªè d·∫•u " ·ªü ƒë·∫ßu v√† cu·ªëi n·∫øu c√≥
          .trim()
      : "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu ƒë∆∞·ª£c ph·∫£n h·ªìi.";

    // Th√™m ph·∫£n h·ªìi c·ªßa bot v√†o l·ªãch s·ª≠
    addToChatHistory(threadID, "assistant", cleanContent);

    // G·ª≠i tin nh·∫Øn ph·∫£n h·ªìi
    api.sendMessage({
      body: cleanContent,
    }, event.threadID, (err, info) => {
      if (err) console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", err);
    }, event.messageID);

    // X·ª≠ l√Ω c√°c h√†nh ƒë·ªông ƒë·∫∑c bi·ªát
    const { nhac, hanh_dong } = botMsg;

    // X·ª≠ l√Ω t√¨m nh·∫°c
    if (nhac && nhac.status === true) {
      await handleMusicSearch(nhac, api, threadID, event);
    }

    // X·ª≠ l√Ω c√°c h√†nh ƒë·ªông kh√°c
    if (hanh_dong) {
      await handleActions(hanh_dong, api, threadID);
    }
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi:", error);
    api.sendMessage("ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω ph·∫£n h·ªìi!", event.threadID, event.messageID);
  }
}

// T√°ch logic x·ª≠ l√Ω nh·∫°c th√†nh h√†m ri√™ng
async function handleMusicSearch(nhac, api, threadID, event) {
 const keywordSearch = nhac.keyword;
 if (!keywordSearch) {
   api.sendMessage("‚ùå Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm √¢m nh·∫°c", threadID);
   return;
 }

 try {
   // ƒê√£ x√≥a d√≤ng th√¥ng b√°o "ƒêang t√¨m ki·∫øm b√†i h√°t" ·ªü ƒë√¢y

   const dataaa = await searchSoundCloud(keywordSearch);

   if (!dataaa || dataaa.length === 0) {
     api.sendMessage(`‚ùé Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o v·ªõi t·ª´ kh√≥a "${keywordSearch}"`, threadID);
     return;
   }

   const firstResult = dataaa[0];
   const urlaudio = firstResult.url;

   try {
     const dataPromise = await scl_download(urlaudio);

     setTimeout(async () => {
       try {
         const audioURL = dataPromise.url;
         if (!audioURL) {
           api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i b√†i h√°t n√†y.", threadID);
           return;
         }

         // Th√™m x·ª≠ l√Ω l·ªói v√† retry cho ph·∫ßn t·∫£i file
         let retryCount = 0;
         const maxRetries = 2;
         let stream;

         while (retryCount <= maxRetries) {
           try {
             const response = await axios.get(audioURL, {
               responseType: 'arraybuffer',
               timeout: 30000,
               headers: {
                 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
               }
             });

             stream = response.data;
             break; // Tho√°t kh·ªèi v√≤ng l·∫∑p n·∫øu th√†nh c√¥ng
           } catch (err) {
             retryCount++;
             if (retryCount > maxRetries) {
               throw err; // N√©m l·ªói n·∫øu ƒë√£ th·ª≠ l·∫°i ƒë·ªß s·ªë l·∫ßn
             }
             // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i
             await new Promise(resolve => setTimeout(resolve, 2000));
           }
         }

         if (!stream) {
           throw new Error("Kh√¥ng th·ªÉ t·∫£i file √¢m thanh");
         }

         const path = __dirname + `/cache/${Date.now()}.mp3`;

         fs.writeFileSync(path, Buffer.from(stream, 'binary'));

         api.sendMessage({
           body: `üéµ B√†i h√°t: ${dataPromise.title || firstResult.title}
üé∂ Ngu·ªìn: SoundCloud`,
           attachment: fs.createReadStream(path)
         }, threadID, () => {
           setTimeout(() => {
             try {
               fs.unlinkSync(path);
             } catch (e) {
               console.error("L·ªói khi x√≥a file t·∫°m:", e);
             }
           }, 2 * 60 * 1000);
         });
       } catch (err) {
         console.error("L·ªói khi t·∫£i nh·∫°c:", err);
         api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫£i nh·∫°c. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
       }
     }, 3000);
   } catch (err) {
     console.error("L·ªói khi t·∫£i th√¥ng tin nh·∫°c:", err);
     api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫£i th√¥ng tin b√†i h√°t. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
   }
 } catch (err) {
   console.error("L·ªói khi t√¨m ki·∫øm nh·∫°c:", err);
   api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm nh·∫°c.", threadID, event.messageID);
 }
}

// T√°ch logic x·ª≠ l√Ω h√†nh ƒë·ªông th√†nh h√†m ri√™ng
async function handleActions(hanh_dong, api, threadID) {
 try {
   if (hanh_dong.doi_biet_danh && hanh_dong.doi_biet_danh.status === true) {
     try {
       await api.changeNickname(
         hanh_dong.doi_biet_danh.biet_danh_moi,
         hanh_dong.doi_biet_danh.thread_id,
         hanh_dong.doi_biet_danh.user_id
       );
     } catch (e) {
       console.error("L·ªói khi ƒê·ªïi bi·ªát danh:", e);
     }
   }

   if (hanh_dong.doi_icon_box && hanh_dong.doi_icon_box.status === true) {
     try {
       await api.changeThreadEmoji(
         hanh_dong.doi_icon_box.icon,
         hanh_dong.doi_icon_box.thread_id
       );
     } catch (e) {
       console.error("L·ªói khi ƒë·ªïi icon nh√≥m:", e);
     }
   }

   if (hanh_dong.doi_ten_nhom && hanh_dong.doi_ten_nhom.status === true) {
     try {
       // S·ª≠a t·ª´ changeThreadName th√†nh setTitle
       await api.setTitle(
         hanh_dong.doi_ten_nhom.ten_moi,
         hanh_dong.doi_ten_nhom.thread_id
       );
     } catch (e) {
       console.error("L·ªói khi ƒë·ªïi t√™n nh√≥m:", e);
     }
   }

   if (hanh_dong.kick_nguoi_dung && hanh_dong.kick_nguoi_dung.status === true) {
     try {
       await api.removeUserFromGroup(
         hanh_dong.kick_nguoi_dung.user_id,
         hanh_dong.kick_nguoi_dung.thread_id
       );
     } catch (e) {
       console.error("L·ªói khi kick ng∆∞·ªùi d√πng:", e);
     }
   }

   if (hanh_dong.add_nguoi_dung && hanh_dong.add_nguoi_dung.status === true) {
     try {
       await api.addUserToGroup(
         hanh_dong.add_nguoi_dung.user_id,
         hanh_dong.add_nguoi_dung.thread_id
       );
     } catch (e) {
       console.error("L·ªói khi th√™m ng∆∞·ªùi d√πng:", e);
     }
   }
 } catch (error) {
   console.error("L·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông:", error);
   if (threadID) {
     api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán h√†nh ƒë·ªông.", threadID);
   }
 }
}